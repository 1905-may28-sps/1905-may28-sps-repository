CREATE TABLE BANK_USER(
  -- colName dataType optionalConstrains
  USER_ID NUMBER(10) PRIMARY KEY,
  FIRST_NAME VARCHAR2(50) NOT NULL,
  LAST_NAME VARCHAR2(50) NOT NULL,
  USERNAME VARCHAR2(20) UNIQUE NOT NULL,
  EMAIL VARCHAR2(100) UNIQUE NOT NULL,
  USER_PASSWORD VARCHAR2(15) NOT NULL);


  
CREATE TABLE BANK_ACCOUNT(
  ACCOUNT_ID NUMBER(10) PRIMARY KEY,
  BALANCE NUMBER(20,2) NOT NULL,
  USER_ID NUMBER (20),
 CONSTRAINT FK_BANK_USER  FOREIGN KEY(USER_ID) REFERENCES BANK_USER(USER_ID)
 );
 

COMMIT;
select * From BANK_USER;
select * From BANK_ACCOUNT;


COMMIT;


create or replace TRIGGER BANKUSER_TRIGGER
  BEFORE INSERT ON BANK_USER
  FOR EACH ROW
BEGIN
    SELECT BANKUSER_SEQ.nextval
    INTO :NEW.USER_ID
    FROM dual;
END;


CREATE SEQUENCE BANKACCOUNT_SEQ;
CREATE OR REPLACE TRIGGER ACCOUNT_TRIGGER
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
SELECT BANKACCOUNT_SEQ.NEXTVAL
INTO :NEW.ACCOUNT_ID
FROM DUAL;
END;
/

SELECT * FROM BANK_ACCOUNT;
SELECT * FROM BANK_USER;



   INSERT INTO BANK_USER (FIRST_NAME,LAST_NAME, USERNAME, EMAIL,USER_PASSWORD) VALUES('KI','OLJI', 'ADIN','NONE@NOE.COM', 'ADIN');
   insert into bank_account(Balance,user_id)values (1230,1);
   INSERT INTO BANK_ACCOUNT (BAlANCE, USER_ID) VALUES(1250, 7);
--select * from store_genre where genre_id = 

SELECT * FROM BANK_ACCOUNT WHERE USER_ID=1;

/
commit;


CREATE OR REPLACE PROCEDURE UPDATE_BANK_ACCOUNT
  (A_ID IN NUMBER, U_BAL IN NUMBER, U_ID IN NUMBER)
  AS
  BEGIN
    UPDATE BANK_ACCOUNT SET 
    BALANCE = BALANCE + U_BAL 
    WHERE USER_ID = U_ID AND ACCOUNT_ID = A_ID;
    COMMIT;
  END;
  /
  CREATE OR REPLACE PROCEDURE WITHDRAW_BANK_ACCOUNT
  (A_ID IN NUMBER, U_BAL IN NUMBER, U_ID IN NUMBER)
  AS
  BEGIN
    UPDATE BANK_ACCOUNT SET 
    BALANCE = BALANCE - U_BAL 
    WHERE USER_ID = U_ID AND ACCOUNT_ID = A_ID;
    COMMIT;
  END;
  /



EXEC UPDATE_BANK_ACCOUNT(1, 1234, 1);
EXEC UPDATE_BANK_ACCOUNT(1, 500, 1);

select * from BANK_ACCOUNT where user_id = 1;

COMMIT;
