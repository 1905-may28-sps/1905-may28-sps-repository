--2.1 SELECT
SELECT * FROM EMPLOYEE

SELECT * FROM EMPLOYEE
    WHERE LASTNAME = 'King'
    
SELECT * FROM EMPLOYEE
    WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL ;
    
--2.2 ORDER BY
SELECT TITLE FROM ALBUM
ORDER BY TITLE DESC; 

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE (GENREID, NAME)
VALUES ('26', '70s');
INSERT INTO GENRE (GENREID, NAME)
VALUES ('27', '80s');

INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (9, 'John', 'Elton', 'Rocketman', 1, TO_DATE('1958-12-8 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2002-5-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), '123 8 Ave SW', 'Calgary', 'AB', 'Canada', 'T2P 2T3', '+1 (403) 262-3443', '+1 (403) 262-3322', 'john@chinookcorp.com');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (10, 'Mercury', 'Freddie', 'Sales Manager', 1, TO_DATE('1958-12-8 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2002-5-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), '234 8 Ave SW', 'Calgary', 'AB', 'Canada', 'T2P 2T3', '+1 (403) 262-3443', '+1 (403) 262-3322', 'freddie@chinookcorp.com');

INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) VALUES (60, 'One', 'Two', 'lala land', 'Prague', 'Czech Republic', '14300', '+420 2 4177 0449', 'onetwo@gmail.com', 9);
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) VALUES (61, 'Three', 'Four', 'BB land, 1010 Innere Stadt', 'Vienne', 'Austria', '1010', '+43 01 5134505', 'threefour@apple.at', 10);

--2.4 UPDATE
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;

SELECT * FROM CUSTOMER

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT TOTAL FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('2003-6-1','yyyy-mm-dd') AND TO_DATE('2004-3-1','yyyy-mm-dd');

COMMIT;

--2.7 DELETE

ALTER TABLE Invoice DROP CONSTRAINT FK_InvoiceCustomerId;

ALTER TABLE Invoice ADD CONSTRAINT FK_InvoiceCustomerId
FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId)ON DELETE CASCADE;

ALTER TABLE InvoiceLine DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE InvoiceLine ADD CONSTRAINT FK_InvoiceLineInvoiceId
FOREIGN KEY (InvoiceId) REFERENCES Invoice (InvoiceId) ON DELETE CASCADE;

DELETE FROM CUSTOMER WHERE CUSTOMERID = '32';

COMMIT;

--3.0 SQL Functions
--3.1 SystemDefined Aggregate Functions

--CREATE FUNCTION 

CREATE OR REPLACE FUNCTION GETNOW_TIME
  RETURN TIMESTAMP
AS
 NOW_TIME TIMESTAMP;
BEGIN
  SELECT CURRENT_TIMESTAMP INTO NOW_TIME FROM dual;
  RETURN NOW_TIME;
END;
/

DECLARE
  TRYNOW TIMESTAMP;
BEGIN
    TRYNOW := GETNOW_TIME();
    
     DBMS_OUTPUT.PUT_LINE('CURRENT TIME IS: ' || TRYNOW);

END;
/

COMMIT;
 
CREATE OR REPLACE FUNCTION lengthofmedia
  RETURN number
AS
 lengthof number;
BEGIN
  SELECT COUNT(*) INTO lengthof FROM dual;
  RETURN lengthof;
END;
/

SELECT LENGTHOFMEDIA() FROM DUAL;

DECLARE
  lengthnow number;
BEGIN
    lengthnow := lengthofmedia();
    
     DBMS_OUTPUT.PUT_LINE('The length of a mediatype is: ' || lengthnow);

END;
/

--3.2 Aggregate Functions
CREATE OR REPLACE FUNCTION INV_TOTAL_AVG
    RETURN NUMBER
IS
    INV_AVERAGE NUMBER(8,4);
BEGIN
    SELECT AVG(TOTAL) INTO INV_AVERAGE FROM INVOICE;
    RETURN INV_AVERAGE;
END;
/

SELECT INV_TOTAL_AVG() FROM DUAL;

CREATE OR REPLACE FUNCTION GET_MAX_TRACK
RETURN NUMBER
IS 
    MAX_TRACK NUMBER;
BEGIN

    SELECT MAX(UNITPRICE) INTO MAX_TRACK FROM INVOICELINE;
    RETURN MAX_TRACK;
END;
/

SELECT GET_MAX_TRACK() FROM DUAL;

COMMIT;

--3.3 USER DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION GET_AVG_UNITPTICE
RETURN NUMBER
IS 
   AVG_UNITPRICE NUMBER;
BEGIN

    SELECT AVG(UNITPRICE) INTO AVG_UNITPRICE FROM INVOICELINE;
    RETURN AVG_UNITPRICE;
END;
/

SELECT GET_AVG_UNITPTICE() FROM DUAL;

--3.4 USER DEFINED FUNCTIONS
CREATE OR REPLACE PROCEDURE BORN_BEFORE_1968(BEFORE_CURS OUT SYS_REFCURSOR)
IS
BEGIN
OPEN BEFORE_CURS FOR 
    SELECT * FROM EMPLOYEE WHERE BIRTHDATE BETWEEN '01/JAN/1900' AND '01/JAN/1968';
END;
/

VAR RC REFCURSOR
EXECUTE BORN_BEFORE_1968(:RC)
PRINT RC;

    
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE BETWEEN '01/JAN/1900' AND '01/JAN/1968';


--4.1 basic Stored Procedures
CREATE OR REPLACE PROCEDURE GET_FNLNEMP(FLN_CURS OUT SYS_REFCURSOR)
IS
BEGIN
OPEN FLN_CURS FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/
VAR RC1 REFCURSOR
EXECUTE GET_FNLNEMP(:RC1)
PRINT RC1;

--4.2 UPDATES THE PERONAL INFORMATION
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE
(E_ID IN NUMBER, E_FN IN VARCHAR2, E_LN IN VARCHAR2, E_ADD IN VARCHAR2, E_TI IN VARCHAR2)
AS
BEGIN
UPDATE EMPLOYEE SET 
FIRSTNAME = E_FN,
LASTNAME = E_LN,
ADDRESS = E_ADD,
TITLE = E_TI
WHERE EMPLOYEEID = E_ID;
COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE VIEW_MANAGERS(MGERNM_CURS OUT SYS_REFCURSOR)
IS
BEGIN
OPEN MGERNM_CURS FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE WHERE TITLE LIKE '%Manager';
END;
/

VAR RC2 REFCURSOR
EXECUTE VIEW_MANAGERS(:RC2)
PRINT RC2;

--4.3 STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE VIEW_CUSTNMCOMP(CUSTNMCOMP_CURS OUT SYS_REFCURSOR, C_ID IN NUMBER)
IS
BEGIN
OPEN CUSTNMCOMP_CURS FOR SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER WHERE CUSTOMERID = C_ID;
END;
/
VAR RC3 REFCURSOR
EXECUTE VIEW_CUSTNMCOMP(:RC3, 3)
PRINT RC3;

--5.0 TRANSATIONS

DELETE FROM INVOICE WHERE INVOICEID=60; 
COMMIT;


CREATE OR REPLACE PROCEDURE DELETE_INV(INV_ID IN NUMBER)
IS
BEGIN
DELETE FROM INVOICELINE WHERE INVOICEID = INV_ID;
DELETE FROM INVOICE WHERE INVOICEID = INV_ID;
END;
/
SELECT * FROM INVOICELINE WHERE INVOICEID = 412;
SELECT * FROM INVOICE WHERE INVOICEID = 412;
EXECUTE DELETE_INV(412);

SELECT * FROM CUSTOMER;
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER
(c_id in number, fn in varchar2,ln in varchar2, cp in varchar2, addre in varchar2, ct in varchar2, st in varchar2, cty in varchar2,
zp in varchar2, phn in varchar2, fx in varchar2, eml in varchar2, sri in number)
as
begin

 insert into customer(CUSTOMERID, FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
 VALUES(C_ID, FN, LN, CP, ADDRE,CT,ST,CTY,ZP,PHN,FX,EML,SRI);
 COMMIT;
END;
/

--6.0 TRIGGERS

CREATE OR REPLACE TRIGGER AF_INSERT_TRIGGER
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN SELECT EMPLOYEEID_SEQUENCE.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;

END;
/

CREATE OR REPLACE TRIGGER AF_UPDATE_TRIGGER
AFTER INSERT ON ALBUM
FOR EACH ROW
BEGIN
SET ARTISTID_SEQUENCE.NEXTVAL INTO :NEW.ARTISTID FROM DUAL;

END;
/

--7.0 JOIN
--7.1 INNER
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME FROM CUSTOMER
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER
SELECT CUSTOMER.CUSTOMERID, INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.TOTAL FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 RIGHT
select al.title AS album, art.name as "ARTIST NAME"
from album al
RIGHT join artist art
on al.artistid = art.artistid;

--7.4 CROSS
select al.title AS album, art.name as "ARTIST NAME"
from album al
CROSS join artist art
ORDER BY ART.NAME ASC;

--7.5 SELF
select STAFF.lastname as STAFF, boss.lastname as boss
from employee STAFF
join employee boss 
on STAFF.reportsto = boss.employeeid;

select * from employee;

--7.6
select track.name as TRACKNAME, album.title, artist.name, genre.name as genre, 
playlist.NAME as playlist, invoice.BILLINGCITY
from track 
join album on track.albumid = album.albumid 
join artist on artist.artistid = album.artistid
join genre on genre.genreid = track.genreid
join playlisttrack on playlisttrack.TRACKID = track.trackid
join playlist on playlist.PLAYLISTID = playlisttrack.PLAYLISTID
join mediatype on mediatype.MEDIATYPEID = track.MEDIATYPEID
join invoiceline on invoiceline.TRACKID = track.trackid
join invoice on invoice.INVOICEID = invoiceline.INVOICEID
join customer on invoice.CUSTOMERID = customer.CUSTOMERID
join employee on employee.EMPLOYEEID = customer.SUPPORTREPID;

--9.0
COMMIT;
