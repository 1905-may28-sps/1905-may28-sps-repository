----- 2.1 SELECT ------
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

----- 2.2 ORDER BY ------
SELECT * FROM ALBUM ORDER BY ALBUM.TITLE DESC;
SELECT * FROM ALBUM ORDER BY ALBUM.TITLE ASC;

------ 2.3 INSERT INT0 -----
INSERT INTO GENRE (GENREID, NAME) VALUES(109, 'TRAP');
INSERT INTO GENRE (GENREID, NAME) VALUES(110, 'HIPHOP');
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES(9, 'LEWIS', 'ANTHONY','IT STAFF', 6, TO_DATE('1958-12-8 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2002-5-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), '525 NOIR ST', 'TORONTO', 'AB', 'CANADA', '123 456', '+ (555) 202 1212', '+(636) 090 0930', 'NONE@chinookcorp.com' );
INSERT INTO EMPLOYEE EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES(10, 'JONES','KENT', 'SALES SUPPORT AGENT', 2, TO_DATE('1968-1-9 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2004-3-4 00:00:00','yyyy-mm-dd hh24:mi:ss'),'090 W61 ST', 'NEW YORK', 'NY', 'USA', '10065', '+1(435) 134 1341', '+(123) 134 5421', 'KELLY@@chinookcorp.com');
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, Phone, Email, SupportRepId)
VALUES(60, 'KELLY', 'WONG', '12 CENTER AVE', 'London', 'United Kingdom', '+44 3243 351 6345', 'muay@yahoo.co.uk', 5);
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, Phone, Email, SupportRepId) 
VALUES(61, 'RACHEL', 'LING', '1324 PARK AVE', 'London', 'United Kingdom', '+44 0341 435 1329', 'steven@gmail.com', 5);

-------- 2.4 UDATE -----------
UPDATE CUSTOMER SET FIRSTNAME = 'ROBERT', LASTNAME = 'WALTER' 
WHERE FIRSTNAME  = 'Aaron' AND LASTNAME = 'Mitchell';
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

-------- 2.5 LIKE ----------------
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--------- 2.6 BETWEEN ------------
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

---------- 2.7 DELETE ------------
ALTER TABLE Invoice DROP CONSTRAINT FK_InvoiceCustomerId;
ALTER TABLE Invoice ADD CONSTRAINT FK_InvoiceCustomerId
FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId)ON DELETE CASCADE; 

ALTER TABLE InvoiceLine DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE InvoiceLine ADD CONSTRAINT FK_InvoiceLineInvoiceId
FOREIGN KEY (InvoiceId) REFERENCES Invoice (InvoiceId) ON DELETE CASCADE;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'ROBERT' AND LASTNAME = 'WALTER';

---------- 3.0 SQL FUNCTIONS --------
---------- 3.1 System Defined Functions ----------
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
    RETURN TIMESTAMP
    IS CUR_DAY TIMESTAMP;
    BEGIN
        SELECT LOCALTIMESTAMP
        INTO CUR_DAY
        FROM DUAL;
        RETURN CUR_DAY;
    END GET_CURRENT_TIME;
/
DECLARE
    CUR TIMESTAMP;
BEGIN
    CUR := GET_CURRENT_TIME;
    DBMS_OUTPUT.PUT_LINE('Current time is ' || CUR);
END;
/
--------------
CREATE OR REPLACE FUNCTION GETLENGTH(X IN VARCHAR2) 
RETURN INTEGER AS Z VARCHAR(200);
BEGIN 
    Z := LENGTH(X);
    RETURN Z;
END;
/
SELECT GETLENGTH(NAME) FROM MEDIATYPE;
------------------- 3.2 System Defined Aggregate Functions ----------------
CREATE OR REPLACE FUNCTION THEAVG
RETURN NUMBER AS I NUMBER;
BEGIN 
SELECT AVG(TOTAL) INTO I FROM INVOICE;
RETURN I;
END;
/
SELECT THEAVG FROM DUAL;
--------
CREATE OR REPLACE FUNCTION HIGHEST_PRICE 
RETURN NUMBER AS HIGHPRICE NUMBER (10,2);
BEGIN
SELECT MAX(UNITPRICE) INTO HIGHPRICE FROM INVOICELINE;
RETURN HIGHPRICE;
END;
/
SELECT HIGHEST_PRICE FROM DUAL;
--------
-------- 3.3 User Defined Functions -------------
CREATE OR REPLACE FUNCTION AVERAGE_PRICE 
RETURN NUMBER AS AVGPRICE NUMBER (10,2);
BEGIN
SELECT AVG(UNITPRICE) INTO AVGPRICE FROM INVOICELINE;
RETURN AVGPRICE;
END;
/
SELECT AVERAGE_PRICE FROM DUAL;
-------- 3.4 User Defined Table Valued Functions -------

-- Task – Create a function that returns all employees who are born after 1968.

------------------ 4.0 Stored Procedures
------------------ 4.1 Basic Stored Procedure ----------
CREATE OR REPLACE PROCEDURE FIRST_AND_LAST
IS
    CURSOR S IS SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
    F_NAME EMPLOYEE.FIRSTNAME%TYPE;
    L_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    OPEN S;
    LOOP
        FETCH S INTO F_NAME, L_NAME;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME: ' || F_NAME || ' ' || L_NAME);
        EXIT WHEN S%NOTFOUND;
    END LOOP;
    CLOSE S;
END FIRST_AND_LAST;
/
EXEC FIRST_AND_LAST;

------------------ 4.2 Stored Procedure Input Parameters -----
------------------ 4.3 Stored Procedure Output Parameters

--------5.0  Transactions
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVID IN NUMBER)
	AS
	BEGIN
	    DELETE FROM INVOICELINE WHERE INVOICEID = INVID;    
	    DELETE FROM INVOICE WHERE INVOICEID = INVID;
	    COMMIT;
	END;
	/
	BEGIN
	    DELETE_INVOICE(111);
	END;
	/
SELECT * FROM INVOICE;

	CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(CID IN NUMBER, FN IN VARCHAR2, LN IN VARCHAR2, COMP IN VARCHAR2, ADDR IN VARCHAR2,
	CTY IN VARCHAR2, ST IN VARCHAR2, CNTRY IN VARCHAR2, PCODE IN VARCHAR2, PHONENUM IN VARCHAR2, FAXNUM IN VARCHAR2, EMAILS IN VARCHAR2, SPTID IN NUMBER)
	AS
	BEGIN
	    INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE ,COUNTRY, POSTALCODE, PHONE ,FAX, EMAIL, SUPPORTREPID)   
	    VALUES(CID, FN, LN, COMP, ADDR, CTY, ST, CNTRY, PCODE, PHONENUM, FAXNUM, EMAILS, SPTID);
	    COMMIT;
	END;
	/

	BEGIN
	INSERT_CUSTOMER(69, 'JAMES ', 'BROWN', 'COMPANY', '1 MAIN AVE', 'NEW YORK', 'NEW YORK', 'USA', '10021', '+1 (347) 224 23246', '+1 (718) 453 3265', '123@ASD.COM', 3);
	END;
/
SELECT * FROM CUSTOMER;

-----------------6.0 Triggers -------------------------
----------------- 6.1 AFTER/FOR -----------------------
CREATE OR REPLACE TRIGGER NEW_EMPLOYEE_RECORDED
	    AFTER INSERT ON EMPLOYEE
	    FOR EACH ROW
	BEGIN
	    DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE ADDED');
	END;
	/
	--UPDATE TRIGGER
	CREATE OR REPLACE TRIGGER ALBUM_UPDATED
	    AFTER UPDATE ON ALBUM
	    FOR EACH ROW
	BEGIN
	    DBMS_OUTPUT.PUT_LINE('NEW ALBUM UPDATE HAPPENED');
	END;
	/
	--DELETE TRIGGER
	CREATE OR REPLACE TRIGGER CUSTOMER_DELETED
	    AFTER DELETE ON CUSTOMER
	    FOR EACH ROW
	BEGIN
	    DBMS_OUTPUT.PUT_LINE('CUSTOMER HAS BEEN DELETED');
	END;
	/
  ------------- 7.0 JOINS --------------------
  ------------- 7.1 INNER --------------------
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID FROM CUSTOMER 
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
--------------- 7.2 OUTER ----------------
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL FROM CUSTOMER
LEFT OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
--------------- 7.3 RIGHT -------------------
SELECT ALBUM.TITLE AS ALBUM, ARTIST.NAME AS "ARTIST NAME" FROM ALBUM 
RIGHT OUTER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;
--------------- 7.4 CROSS -------------------
SELECT ARTIST.NAME, ALBUM.TITLE FROM ALBUM CROSS JOIN ARTIST 
ORDER BY ARTIST.NAME ASC;
--------------- 7.5 SELF --------------------
SELECT MINION.LASTNAME AS MINION, BOSS.LASTNAME AS BOSS
FROM EMPLOYEE MINION
JOIN EMPLOYEE BOSS 
ON MINION.REPORTSTO = BOSS.EMPLOYEEID;
-------------- 7.6 Complicated Join assignment -----
SELECT TRACK.NAME AS TRACKNAME, ALBUM.TITLE, ARTIST.NAME, GENRE.NAME AS GENRE, 
	PLAYLIST.NAME AS PLAYLIST, INVOICE.BILLINGCITY
	FROM TRACK 
	INNER JOIN ALBUM ON TRACK.ALBUMID = ALBUM.ALBUMID 
	INNER JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID
	INNER JOIN GENRE ON GENRE.GENREID = TRACK.GENREID
	INNER JOIN PLAYLISTTRACK ON PLAYLISTTRACK.TRACKID = TRACK.TRACKID
	INNER JOIN PLAYLIST ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID
	INNER JOIN MEDIATYPE ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
	INNER JOIN INVOICELINE ON INVOICELINE.TRACKID = TRACK.TRACKID
	INNER JOIN INVOICE ON INVOICE.INVOICEID = INVOICELINE.INVOICEID
	INNER JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
	INNER JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID;


 BACKUP DATABASE;