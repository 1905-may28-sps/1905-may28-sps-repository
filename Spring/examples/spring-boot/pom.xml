<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.revature</groupId>
  <artifactId>spring-boot</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
	</parent>

	<dependencies>
		<!-- Spring Boot Starters are a set of convenient dependency descriptors 
			that you can include in your application. You get a one-stop-shop for all 
			the Spring and related technology that you need without having to hunt through 
			sample code and copy paste loads of dependency descriptors. For example, 
			if you want to get started using Spring and JPA for database access just 
			include the spring-boot-starter-data-jpa dependency in your project, and 
			you are good to go. -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
			<!-- Implementing a data access layer of an application has been cumbersome 
				for quite a while. Too much boilerplate code has to be written to execute 
				simple queries as well as perform pagination, and auditing. Spring Data JPA 
				aims to significantly improve the implementation of data access layers by 
				reducing the effort to the amount thatâ€™s actually needed. As a developer 
				you write your repository interfaces, including custom finder methods, and 
				Spring will provide the implementation automatically. 	
		<dependency>
	
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc7</artifactId>
			<version>11.2.0</version>
		</dependency>
-->	
<!-- Dev tools is simply a tool for development 
that allows your spring boot application to reload
your app onto its embedded server after saved changes
automatically instead of you having to restart it 
yourself. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		
	<!-- Actuators are spring boot subprojects
	that expose preconfigured endpoints (with some 
	extra configuration) that give more information 
	about your application 
	ie /health
	/info
	/beans, and more  -->
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
 
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>