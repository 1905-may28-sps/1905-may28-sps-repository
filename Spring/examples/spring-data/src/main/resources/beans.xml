<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
<!-- selected namespaces: beans, context, tx, jpa -->


<context:property-placeholder location="classpath:db.properties"/>
 
 <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource">
 	<property name="driverClassName" value="${db.driver}" />
 	<property name="url" value="${db.url}" />
 	<property name="username" value="${db.user}" />
 	<property name="password" value="${db.password}"/>
 </bean>
	<!-- spring data is not natively compatible with hibernate it is compatible 
		with JPA, and in turn any "vendor" of an ORM tool that is JPA compliant however 
		we need to use a vendor adapter -->
	<bean id="hibernateJpaVendorAdapter" 
	class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
	


</beans>
