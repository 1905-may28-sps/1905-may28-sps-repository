CREATE TABLE BANK_USER(
U_ID NUMBER(10) PRIMARY KEY,
FIRSTNAME VARCHAR2(50) NOT NULL,
LASTNAME VARCHAR2(50) NOT NULL,
USERNAME VARCHAR2(25) UNIQUE NOT NULL,
PASSWORD VARCHAR2(25) UNIQUE NOT NULL
);

CREATE TABLE BANK_ACCOUNT(
ACC_ID NUMBER(20) PRIMARY KEY,
BALANCE NUMBER(20,2) NOT NULL,
ACC_OWNER NUMBER(10),
FOREIGN KEY (ACC_OWNER) REFERENCES BANK_USER(U_ID)
);

ALTER TABLE BANK_ACCOUNT ADD ACC_TYPE VARCHAR2(50);
TRUNCATE TABLE BANK_ACCOUNT;

CREATE TABLE BANK_ACCOUNT_TYPE(
ID NUMBER(10) PRIMARY KEY,
ACCTYPE VARCHAR2(50) NOT NULL
);

select * from bank_user;
select * from bank_account;


--CREATING SEQUENCE AND TRIGGER FOR ID IN BANK_USER TABLE
CREATE SEQUENCE USERID_SEQ;

CREATE SEQUENCE  "DEMO1905MAY28SPS". "USERID_SEQ"
MINVALUE 1
MAXVALUE 99999999999999999999999
INCREMENT BY 1
START WITH 1
CACHE 20
NOORDER
NOCYCLE
NOPARTITION;
/
SELECT USERID_SEQ.NEXTVAL FROM DUAL;
/

CREATE OR REPLACE TRIGGER USERID_TRIGGER
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN

SELECT USERID_SEQ.NEXTVAL 
INTO :NEW.U_ID 
FROM DUAL;
END;
/
commit;
--CREATING SEQUENCE AND TRIGGER FOR ID IN BANK_ACCOUNT TABLE
CREATE SEQUENCE ACCID_SEQ;

CREATE SEQUENCE  "DEMO1905MAY28SPS". "ACCID_SEQ"
MINVALUE 1
MAXVALUE 99999999999999999999999
INCREMENT BY 1
START WITH 1
CACHE 20
NOORDER
NOCYCLE
NOPARTITION;
/
SELECT ACCID_SEQ.NEXTVAL FROM DUAL;
/

CREATE OR REPLACE TRIGGER ACCID_TRIGGER
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN

SELECT ACCID_SEQ.NEXTVAL 
INTO :NEW.ACC_ID 
FROM DUAL;
END;
/
commit;

--CREATING SEQUENCE AND TRIGGER FOR ID IN BANK_ACCOUNT_TYPE TABLE

CREATE SEQUENCE ID_SEQ;

CREATE SEQUENCE  "DEMO1905MAY28SPS". "ID_SEQ"
MINVALUE 1
MAXVALUE 99999999999999999999999
INCREMENT BY 1
START WITH 1
CACHE 20
NOORDER
NOCYCLE
NOPARTITION;
/
SELECT ID_SEQ.NEXTVAL FROM DUAL;
/

CREATE OR REPLACE TRIGGER ID_TRIGGER
BEFORE INSERT ON BANK_ACCOUNT_TYPE
FOR EACH ROW
BEGIN

SELECT ID_SEQ.NEXTVAL 
INTO :NEW.ID 
FROM DUAL;
END;
/

select * from bank_user;
--JOIN TO DISPLAY USERNAME, ACC_ID AND BALANCE FROM BANK_USER AND BANK_ACCOUNT TABLES
SELECT BANK_USER.USERNAME, BANK_ACCOUNT.ACC_ID, BANK_ACCOUNT.BALANCE 
FROM BANK_USER JOIN BANK_ACCOUNT 
ON BANK_USER.U_ID = BANK_ACCOUNT.ACC_OWNER
where username = 'bank';

select * from bank_user;
select * from BANK_ACCOUNT;
INSERT INTO BANK_ACCOUNT (ACC_TYPE, BALANCE) VALUES ('Checking',45000);

INSERT INTO BANK_ACCOUNT (ACC_TYPE, BALANCE, ACC_OWNER) values ('checking',45000, 41);
select * from bank_user;

INSERT INTO BANK_ACCOUNT (ACC_TYPE, BALANCE, ACC_OWNER) values ('Saving',5000, 47);

UPDATE BANK_ACCOUNT SET BALANCE = 6000 WHERE ACC_ID = 26;

rollback

commit;

select * from bank_user;
select * from bank_account;

SELECT BANK_ACCOUNT.ACC_ID, BANK_ACCOUNT.BALANCE 
							FROM BANK_USER JOIN BANK_ACCOUNT
							ON BANK_USER.U_ID = BANK_ACCOUNT.ACC_OWNER 
							WHERE USERNAME = 'bank'
 SELECT * FROM BANK_ACCOUNT;             
              
CREATE OR REPLACE PROCEDURE UPDATE_BALANCE
  (ACCOUNT_ID IN NUMBER, BAL IN NUMBER)
AS
BEGIN
   UPDATE BANK_ACCOUNT SET
   BALANCE = BAL
   WHERE   ACC_ID = ACCOUNT_ID;
  COMMIT;
END;
/
EXEC UPDATE_BALANCE (27, 3000);

SELECT * FROM BANK_ACCOUNT;
SELECT * FROM BANK_USER;
commit;

SELECT * FROM BANK_ACCOUNT;