create table BANK_USER(
USERID INT PRIMARY KEY,
FIRSTNAME VARCHAR2 (20) NOT NULL,
LASTNAME VARCHAR2 (40) NOT NULL,
USERNAME VARCHAR2 (25) NOT NULL UNIQUE,
PASSWORD VARCHAR2 (25) NOT NULL
);
drop table bank_user;
drop table bankaccounts;


CREATE TABLE BANKACCOUNTS(
ACCOUNTID INT PRIMARY KEY,
ACCTNUM INT UNIQUE,
USERID INT NOT NULL,
BALANCE NUMBER (20,2) NOT NULL CHECK (BALANCE>=0),
ACCOUNT_TYPE VARCHAR2(20) NOT NULL,
FOREIGN KEY (USERID) REFERENCES BANK_USER(USERID)
);
Alter table bankaccounts MODIFY column ACCTnum AS ACCOUNTID+100000;
alter table bankaccounts add ACCTNUM AS (ACCOUNTID+100000);
modify BALANCE NUMBER (20,2) NOT NULL;
Alter table bankaccounts drop column ACCTnum;
select * from bankaccounts;
drop table bankaccounts;

create sequence BANKUSER_SEQ;
/*
TRIGGER
BLOCK of pl//sql code that allows us to 'trigger' an event or process upon a 
particular dml command
*/
CREATE or REPLACE TRIGGER BANKUSER_TRIGGER --cREATE OR REPLACE TRRIGGER TRIGGERNAME - DECLARE AND NAME
BEFORE INSERT ON BANK_USER--BEFORE/AFTER DML COMMAND ON TABLE WHEN WILL THIS EXECUTE
FOR EACH ROW
BEGIN
-- HERE IS WHER WE WRITE WHAT WE WANT TO DO WHEN TRIGGER IS FIRED
SELECT BANKUSER_SEQ.NEXTVAL -- ++GENRE_SWQ
INTO :NEW.USERID -- REPRESENTS A PLACEHOLDER VALUE
FROM DUAL;
END;
/
create sequence BANKACCOUNTS_SEQ;
drop sequence BANKACCOUNTS_SEQ;
CREATE or REPLACE TRIGGER BANKACCOUNTS_TRIGGER
BEFORE INSERT ON BANKACCOUNTS
FOR EACH ROW
BEGIN
SELECT BANKACCOUNTS_SEQ.NEXTVAL
INTO :NEW.ACCOUNTID
FROM DUAL;
END;
/
create sequence BANKACCOUNTSNUM_SEQ
START WITH     1000;
CREATE or REPLACE TRIGGER BANKACCOUNTSNUM_TRIGGER
BEFORE INSERT ON BANKACCOUNTS
FOR EACH ROW
BEGIN
SELECT BANKACCOUNTSNUM_SEQ.NEXTVAL
INTO :NEW.ACCTNUM
FROM DUAL;
END;
/

DROP TRIGGER BANKACCOUNTSNUM_TRIGGER;
DROP sEQUENCE BANKACCOUNTSNUM_SEQ;

INSERT INTO BANK_USER (FIRSTNAME,LASTNAME, USERNAME,PASSWORD) VALUES ('FName_tes1t','LName_te1st','User_Test12','password_test11');
select *from bank_user where Username='pllz' and Password='andty';
select *from bank_user;
INSERT INTO BANKACCOUNTS (USERID,BALANCE,ACCOUNT_TYPE,Acctnum) VALUES (1,300.12,'savings',102);
INSERT INTO BANKACCOUNTS (Accountid, USERID, BALANCE, ACCOUNT_TYPE, Acctnum) VALUES (1, 37,300.12,'savings',102);
INSERT INTO BANKACCOUNTS (USERID, BALANCE, ACCOUNT_TYPE) VALUES (61,1300.12,'savings');
INSERT INTO BANKACCOUNTS (USERID, BALANCE, ACCOUNT_TYPE) VALUES (37,300.12,'savings');
select * from bankaccounts;
select * from bankaccounts join bank_user on bankaccounts.userid = bank_user.userid;
commit;





delete from BANKACCOUNTS where Accountid =1;

DELETE FROM BANK_USER where USERID=1;
select * from BankAccounts;

CREATE OR REPLACE PROCEDURE BalanceWithDep 
   (uId IN Number, ANum IN NUMBER, WithDep in number) AS
BEGIN
   Update BANKACCOUNTS
   SET BALANCE=(BALANCE+WithDep)
   Where ACCTNUM=ANum and USERID=uId;
   commit;
END;
/
drop procedure BalanceWithDep;


