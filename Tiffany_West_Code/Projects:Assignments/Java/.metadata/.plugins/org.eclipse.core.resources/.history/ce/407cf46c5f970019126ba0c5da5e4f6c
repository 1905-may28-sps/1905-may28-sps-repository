package com.revature.bankApp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Scanner;

import com.revature.doa.AccountDAO;
import com.revature.doa.TypeDAO;
import com.revature.doa.UserDAO;
import com.revature.pojos.Account;
import com.revature.pojos.Type;
import com.revature.pojos.User;
import com.revature.util.ConnectionFactory;

public class app {

	static Scanner scan = new Scanner(System.in);
	static UserDAO userDao = new UserDAO();
	static TypeDAO typeDao = new TypeDAO();
	static AccountDAO accDao = new AccountDAO();

	public static void main(String[] args) {
		
			//		Genre g = gDao.findById(1);
		//	User u = userDao.findById(1);
		//System.out.println(u);
		//loginUser();
		welcomeView();
		
		
		
		//list Account types might have to put this in a switch statement
		TypeDAO tdao = new TypeDAO();
		List<Type> types =tdao.findAll();
	//System.out.println("Account Types: " + types );
		
	}
	
	
	public static void welcomeView() {
		
		System.out.println("Welcome to West Investments, would you like to sign in "
				+ "or create an account?\n "
				+ "Press 1 : Sign-In \n "
				+ "Press 2 : Create a New Account");
		String welcome = scan.nextLine();
		switch(welcome) {
		case "1": signIn();
		break;
		case "2": createAccount();
		break;
		default:
			System.out.println("please enter 1 or 2");
			welcomeView();
		}
		
	}

	 public static void signIn() {
		 
		System.out.println("sign in method here");
		
		
		System.out.println("Enter your username: ");
		String un = scan.nextLine();
		
		Valuser(un);
		
		System.out.println("Enter your password: ");
		String pw = scan.nextLine();
		
		Valpass(pw);
		
		
		if(Valpass(pw)) {
			System.out.println("login succesful");
			dashboard();
		}
		
		
		//System.out.println("Log in Successful:");
		/*
		 * User logUser = new User();
		logUser.setUserName(un);
		logUser.setPassword(pw);
		
		logUser = userDao.login(logUser);
		System.out.println(logUser);
	
		//System.out.println("Welcome: " );
		
			
		//accUser = accDao.getLogin(accUser);
		/*
		 * 		authUser = userDao.login(authUser);
		 //System.out.println(cred);
	
	Display();
		
		 */
		 
		

	}
	
	
	
	 


	static void createAccount() {

		  	System.out.println("Follow these instructions to create an account");
		  	System.out.println("First Name: ");
		  	String fn = scan.nextLine();
		  	System.out.println("Last Name: ");
		  	String ln = scan.nextLine();
		  	System.out.println("Choose a username: ");
		  	String un = scan.nextLine();
		  	System.out.println("Choose a password: ");
		  	String pw = scan.nextLine();
		  	
		  	User newUser = new User();
		  	
		  	if(fn !=null && !fn.equals("")) newUser.setFirstName(fn);
		  	if(ln !=null && !ln.equals("")) newUser.setLastName(ln);
		  	if(un !=null && !un.equals("")) newUser.setUserName(un);
		  	if(pw !=null && !pw.equals("")) newUser.setPassword(pw);

		  		
		  	newUser = userDao.addUser(newUser);
		  	//System.out.println(newUser);
		  	
		  	//if (fn==null || fn.isEmpty()) 
		  	//put this in a try catch  finally to make sure the input isn't null or empty
		  	
		  	
		  	//after account is created go back to the welcome view to sign in
		}
	  
	  public static void Display() {
		  /*
			try(Connection conn = ConnectionFactory.getInstance().getConnection()){
				
				
				
				
				 * 				Statement stmt = conn.createStatement();

				 * 
				 * 	String sql = " select bank_user.first_name, bank_user.last_name, bank_account.balance,bank_account.account_number,bank_account_type.type\n" + 
						"from bank_account\n" + 
						" join bank_user on bank_user.user_id = bank_account.user_id \n" + 
						" join bank_account_type on bank_account.type_id = bank_account_type.type_id\n" + 
						" where  username =  ? and password = ? ";
				
				
				
				
				
					
					
					
					System.out.println("Account Info:\n "
							+ "First Namae: "+fname +  "Last Name: " + lname+ " Balance: $"+bal+
							" Account Number: "+ acn+ " Account Type: "+ type);
					
				}
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
				 */
			
		
	  }
		
	
	   static boolean Valuser(String username) {
		  //User users = new User();
		  User users = null;
		  boolean valid = false;
		  
		  try (Connection conn = ConnectionFactory.getInstance().getConnection()){
			 String sql = "select username from bank_user where username = ? ";
			 
			 PreparedStatement ps = conn.prepareStatement(sql);
			 	ps.setString(1, username);
			 
	            ResultSet rs = ps.executeQuery();
	            while(rs.next()) {
	            	users = new User();
	            	users.setUserName(rs.getString(1));
	            }
	            		
	            	
		  } catch (SQLException e) {
			e.printStackTrace();
		}
		return valid;
	  }
	   
	   static boolean Valpass(String password) {
			  //User users = new User();
			  User users = null;
			  boolean valid = false;
			  
			  try (Connection conn = ConnectionFactory.getInstance().getConnection()){
				 String sql = "select password from bank_user where password = ?";
				 
				 PreparedStatement ps = conn.prepareStatement(sql);
				 	ps.setString(1, password);
				 
		            ResultSet rs = ps.executeQuery();
		            while(rs.next()) {
		            	users = new User();
		            	users.setPassword(rs.getString(1));
		            }
		            		
		            	
			  } catch (SQLException e) {
				e.printStackTrace();
			}
			 try { 
			  if(users.getPassword().equals(password)) {
				  valid = true;
			  }
			  
			  else {
				  System.out.println("else wrong password");
				//signIn();  
			  }
			 }
			 catch(Exception e) {
				System.out.println("wrong password"); 
				signIn();
			 }
			return valid;
		  }


	   static void dashboard() {
	   		System.out.println("What would you like to do?");
	   		System.out.println("1: Account Information");
	   		System.out.println("2: Add Accont");
	   		System.out.println("3: Withdraw");
	   		System.out.println("4: Deposit");
	   		System.out.println("5: Sign out");
	   		
			String dash = scan.nextLine();
			switch(dash) {
			case "1": accountInfo();
			break;
			case "2": addAccount();
			break;
			case "3": withdraw();
			break;
			case "4": deposit();
			break;
			case "5": 
				System.out.println("leaving program");
				System.exit(0);
			break;
			}

}



	static void accountInfo() {
		/*
		 * 		   testing this w/o having to "log user in again" nope - maybe I can call the withdraw and deposit from here  or get rid of login and do 
					everything here
		 */
		
		   
		System.out.println("enter your username again");
		String un = scan.nextLine();
		Valuser(un);
		System.out.println("now pass");
		String pw = scan.nextLine();
		Valpass(pw);
		
		   String fname;
		   String lname;
		   double bal; //mght have to set to 0
		   int 	  acnum;
		   String type;
		   String username = un; //?
		   User uinfo = null;
		   Type tinfo = null;
		   Account ainfo = null;
		   
		   try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			   
			   String sql = " select bank_user.first_name,bank_user.last_name,bank_account.balance,bank_account.account_number,bank_account_type.type\n" + 
			   		"from bank_account\n" + 
			   		" join bank_user on bank_user.user_id = bank_account.user_id \n" + 
			   		" join bank_account_type on bank_account.type_id = bank_account_type.type_id\n" + 
			   		" where  username = ?";
			   
			   PreparedStatement ps = conn.prepareStatement(sql);
			   ps.setString(1, username);
			   ResultSet rs = ps.executeQuery();
			   while(rs.next()) {
				   uinfo = new User();
				   tinfo = new Type();
				   ainfo = new 	Account();
				   
				   uinfo.setFirstName(rs.getString(1));
				   uinfo.setLastName(rs.getString(2));
				   ainfo.setBalance(rs.getDouble(3));
				   ainfo.setAccountNumber(rs.getInt(4));
				   tinfo.setType(rs.getString(5));
				   
				   
				   // this prints out "first last" idk why
				 // System.out.println("Hello "+ uinfo.getFirstName()+ " "+ uinfo.getLastName()+ ",");
				   
				   System.out.println("Your " + tinfo.getType() + "  for Account Number: "+ ainfo.getAccountNumber() 
				   + " Has a balance of $" + ainfo.getBalance());
				   
				   addAccount();
			   }
			   
			   
		   } catch (SQLException e) {
			e.printStackTrace();
		}
		   
	   }

	static void addAccount() {
				//put this in accountinfo to test if we can call this method
		
		TypeDAO tdao = new TypeDAO();
		List<Type> types =tdao.findAll();
	System.out.println("Would you like to create any of these Account types:" + types );
	/**
	 * or would i have to insert based on the id like checking is one so insert into bank_account
	 * 
	 * make a switch for the account type, what they input will
	 */
	System.out.println("Press 1:  For Checking");
	System.out.println("Press 2: For Savings");
	System.out.println("Press 3: for CD");
	System.out.println("Press 4: for Business Checking");
	int type =  Integer.parseInt(scan.nextLine());
	
	System.out.println("Please enter an initial balance: $");
	double bal =  Double.parseDouble(scan.nextLine());  //this is a double ???
	
	 int Atype = type; 
	 double balance = bal;
	 
		 
	   User uinfo = null;
	   Type tinfo = null;
	   Account ainfo = null;
	
	/*
	 * based on their input i'll take this as the type_id, (hopefully i'll have their user_id) and ask them for the balance if not kick it back to the dashboard and just ask for username
	 */
	
	
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			/*
			 * Connection has a property of autoCommit set to true
			 * which automatically commits your changes before it closes
			 * if we want to do some sort of error checking before we commit, 
			 * we must setAutoCommit to false
			 * 
			 * ie conn.setAutoCommit(false);
			 */
	
			/*
			 * Prepared statements allow us to replace variables with ? to 
			 * be able to have variable arguments and prevent SQL injection
			 * 
			 * Also, when inserting data into our DB, we want to obtain the 
			 * automatically generated ID. we do this by "preparing" our 
			 * PreparedStatement with the name(s) of the keys (columns) that 
			 * will be automatically generated, and obtaining them from the
			 * ResultSet returned from ps.getGeneratedKeys() method
			 */
			
			String sql = " INSERT INTO bank_account  (balance, type_id) VALUES (?,?)";
			String[] generatedKeys = {"Account_ID"}; //takes an array just in case we have more than 1 key
			
			PreparedStatement ps = conn.prepareStatement(sql, generatedKeys);
				ps.setDouble(1, bal);
				ps.setInt(2, type);
				ps.executeUpdate();
				
				   tinfo = new Type();
				   ainfo = new 	Account();
			
			/*
			 * executeQuery returns RESULT SET 
			 * executeUpdate returns NUM ROWS AFFECTED
			 * we do not have to do anything w the number of rows 
			 * but we can 
			 * 
			 * ie. int NumRowsAffected = ps.executeUpdate();
			 */
			 ps.executeUpdate();
			 
			 /*
			  * get autogenerateed ID
			  */
			 
			 ResultSet pk = ps.getGeneratedKeys();
			 pk.next();
			 ainfo.setId(pk.getInt(1));
			 
			 System.out.println( " Has a balance of $" + ainfo.getBalance());
			 				
		} catch (SQLException e) {
			e.printStackTrace();
		}
	
	
}
	
	static void withdraw() {
		
	}

	
    static void deposit() {
		
	}
}

